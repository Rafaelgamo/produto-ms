spring.application.name=produto-service

server.port=${PRODUTO_SERVICE_PORT:8082}

# Database
produtos.api.db.name=${PRODUTO_DB_NAME:produtosdb}
produtos.api.db.host=${PRODUTO_DB_HOST:postgresql://localhost}
produtos.api.db.port=${PRODUTO_DB_PORT:5432}
produtos.api.db.user=${PRODUTO_DB_USER:postgres}
produtos.api.db.password=${PRODUTO_DB_PASSWORD:postgres}
produtos.api.db.params=createDatabaseIfNotExist=true&autoReconnect=true&useUnicode=true&characterEncoding=UTF-8&connectionTimeZone=UTC

spring.datasource.jdbc-url=jdbc:${produtos.api.db.host}:${produtos.api.db.port}/${produtos.api.db.name}?${produtos.api.db.params}
spring.datasource.username=${produtos.api.db.user}
spring.datasource.password=${produtos.api.db.password}
spring.datasource.driverClassName=org.postgresql.Driver

spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql = true
spring.batch.jdbc.initialize-schema=always


spring.cloud.function.web.path=/api

spring.cloud.stream.kafka.binder.brokers=localhost
spring.cloud.stream.kafka.binder.requiredAcks=all
spring.cloud.stream.kafka.binder.autoCreateTopics=true
spring.cloud.stream.kafka.binder.replicationFactor=1
spring.cloud.stream.kafka.default.consumer.autoRebalanceEnabled=true
spring.cloud.stream.kafka.default.consumer.startOffset=earliest
spring.cloud.stream.kafka.default.consumer.max.poll.records=10

queue.topics.defaultGroup=estoque-service-group

queue.topics.novo-pedido.name=novo-pedido-topic
queue.topics.estoque-reservado.name=estoque-reservado-topic
queue.topics.entrega-concluida.name=entrega-concluida-topic
queue.topics.estoque-insuficiente.name=estoque-insuficiente-topic

spring.cloud.function.definition=novoPedidoEntrypoint;entregaConcluidaEntrypoint

# Novo Pedido <--
spring.cloud.stream.bindings.novoPedidoEntrypoint-in-0.destination=${queue.topics.novo-pedido.name}
spring.cloud.stream.bindings.novoPedidoEntrypoint-in-0.group=${${queue.topics.defaultGroup}}

# Entrega Concluida <--
spring.cloud.stream.bindings.entregaConcluidaEntrypoint-in-0.destination=${queue.topics.entrega-concluida.name}
spring.cloud.stream.bindings.entregaConcluidaEntrypoint-in-0.group=${${queue.topics.defaultGroup}}

# Estoque Reservado -->
spring.cloud.stream.bindings.estoqueReservadoStreamDispatcher-out-0.destination=${queue.topics.estoque-reservado.name}
spring.cloud.stream.bindings.estoqueReservadoStreamDispatcher-out-0.group=${${queue.topics.defaultGroup}}

# Kafka logging
logging.level.org.apache.zookeeper=ERROR
logging.level.org.apache.kafka=ERROR
logging.level.kafka=ERROR
logging.level.kafka.cluster=ERROR
logging.level.kafka.controller=ERROR
logging.level.kafka.coordinator=ERROR
logging.level.kafka.log=ERROR
logging.level.kafka.server=ERROR
logging.level.kafka.zookeeper=ERROR
logging.level.state.change.logger=ERROR