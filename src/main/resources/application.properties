spring.application.name=microsservico

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/db_estoque
spring.datasource.jdbcUrl=jdbc:mysql://localhost:3306/db_estoque
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.hibernate.ddl-auto=update

spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql = true
spring.batch.jdbc.initialize-schema=always


spring.cloud.function.web.path=/api


spring.cloud.stream.kafka.binder.brokers=localhost
#spring.cloud.stream.kafka.binder.defaultBrokerPort=9092
spring.cloud.stream.kafka.binder.requiredAcks=all
spring.cloud.stream.kafka.binder.autoCreateTopics=true
spring.cloud.stream.kafka.binder.replicationFactor=1
spring.cloud.stream.kafka.default.consumer.autoRebalanceEnabled=true
spring.cloud.stream.kafka.default.consumer.startOffset=earliest
spring.cloud.stream.kafka.default.consumer.max.poll.records=10

queue.topics.novo-pedido.name=novo-pedido-topic
queue.topics.novo-pedido.groups.estoque=estoque-service-group-novo-pedido

# Estoque/Catalogo
spring.cloud.stream.bindings.estoqueEntrypoint-in-0.destination=${queue.topics.novo-pedido.name}
spring.cloud.stream.bindings.estoqueEntrypoint-in-0.group=${queue.topics.novo-pedido.groups.estoque}

# Producer -- enviar msg
spring.cloud.stream.bindings.novoPedidoStreamDispatcher-out-0.destination=${queue.topics.pedido-cancelado.name} -- mudar nome.
spring.cloud.stream.bindings.novoPedidoStreamDispatcher-out-0.group=${queue.topics.pedido-validado.group} -- mudar nome