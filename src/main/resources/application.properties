spring.application.name=microsservico

server.port=${PRODUTO_SERVICE_PORT:8082}

# Database
produtos.api.db.name=${PEDIDOS_DB_NAME:produtosdb}
produtos.api.db.host=${PEDIDOS_DB_HOST:postgresql://localhost}
produtos.api.db.port=${PEDIDOS_DB_PORT:5432}
produtos.api.db.user=${PEDIDOS_DB_USER:postgres}
produtos.api.db.password=${PEDIDOS_DB_PASSWORD:postgres}
produtos.api.db.params=createDatabaseIfNotExist=true&autoReconnect=true&useUnicode=true&characterEncoding=UTF-8&connectionTimeZone=UTC

spring.datasource.jdbc-url=jdbc:${produtos.api.db.host}:${produtos.api.db.port}/${produtos.api.db.name}?${produtos.api.db.params}
spring.datasource.username=${produtos.api.db.user}
spring.datasource.password=${produtos.api.db.password}
spring.jpa.hibernate.ddl-auto=update

spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql = true
spring.batch.jdbc.initialize-schema=always


spring.cloud.function.web.path=/api


spring.cloud.stream.kafka.binder.brokers=localhost
spring.cloud.stream.kafka.binder.requiredAcks=all
spring.cloud.stream.kafka.binder.autoCreateTopics=true
spring.cloud.stream.kafka.binder.replicationFactor=1
spring.cloud.stream.kafka.default.consumer.autoRebalanceEnabled=true
spring.cloud.stream.kafka.default.consumer.startOffset=earliest
spring.cloud.stream.kafka.default.consumer.max.poll.records=10

queue.topics.novo-pedido.name=novo-pedido-topic
queue.topics.novo-pedido.groups.estoque=estoque-service-group-novo-pedido

# Estoque/Catalogo
spring.cloud.stream.bindings.estoqueEntrypoint-in-0.destination=${queue.topics.novo-pedido.name}
spring.cloud.stream.bindings.estoqueEntrypoint-in-0.group=${queue.topics.novo-pedido.groups.estoque}

# Producer -- enviar msg
spring.cloud.stream.bindings.novoPedidoStreamDispatcher-out-0.destination=${queue.topics.pedido-cancelado.name} -- mudar nome.
spring.cloud.stream.bindings.novoPedidoStreamDispatcher-out-0.group=${queue.topics.pedido-validado.group} -- mudar nome